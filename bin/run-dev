#!/usr/bin/env node
const color = require('colors/safe');
const spawn = require('child_process').spawn;
const appRunner = require('./app-runner');

const SERVERLESS_MESSAGE = 'App is starting with no server (Make sure something is running on port 3000)';
const SERVER_DIR = process.env.SERVER_DIR || '/Users/skuttleman/Documents/dev/photo-app/server';
const SIMULATOR_DIR = process.env.SIMULATOR_DIR || '/Users/skuttleman/Documents/dev/photo-app/server-simulator';

const config = {
  processes: [
    {
      args: ['lein', ['run'], { cwd: SERVER_DIR }],
      color: color.yellow,
      healthCheck: message => message.match(/port/) && message.match(/3000/),
      notIfFlags: ['no-server', 'simulator'],
      timeout: 60
    }, {
      args: ['rackup', ['-p', '3000'], { cwd: SIMULATOR_DIR }],
      color: color.yellow,
      healthCheck: message => message.match(/port/) && message.match(/3000/),
      onlyIfFlags: ['simulator']
    }, {
      args: ['echo', SERVERLESS_MESSAGE.split(' ')],
      color: color.yellow,
      healthCheck: () => true,
      onlyIfFlags: ['no-server']
    }, {
      args: ['npm', ['start']],
      color: color.cyan,
      healthCheck: message => message.match(/http/) && message.match(/8080/)
    }, {
      args: ['npm', ['run', 'dev']],
      color: color.white,
      healthCheck: message => message.match(/webpack/) && message.match(/app\.js/),
      timeout: 60
    }, {
      args: ['npm', ['run', 'style']],
      color: color.magenta,
      healthCheck: message => message.match(/Sass is watching/)
    }
  ],
  onStarted() {
    logMessage('Portfolio app is running');
    spawn('open', ['http://localhost:8080']);
  },
  onStopped() {
    console.log('Portfolio app is shutting down...');
  },
  onFailed() {
    console.log('');
    console.log('ERROR:', color.red('Portfolio app failed to come up.'));
    console.log('');
  }
};

const logMessage = message => {
  let asterisks = '*';
  while (asterisks.length < message.length + 6) asterisks += '*';
  ['', asterisks, `** ${message} **`, asterisks, ''].forEach(line => {
    console.log(line);
  });
};

appRunner(config);
